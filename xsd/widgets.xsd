<xs:schema 
xmlns="http://www.cruxframework.org/crux/widgets" 
xmlns:xs="http://www.w3.org/2001/XMLSchema" 
xmlns:c="http://www.cruxframework.org/crux" 
xmlns:_gwt="http://www.cruxframework.org/crux/gwt" 
xmlns:_smart-faces="http://www.cruxframework.org/crux/smart-faces" 
attributeFormDefault="unqualified" 
elementFormDefault="qualified" 
targetNamespace="http://www.cruxframework.org/crux/widgets" >
<xs:import schemaLocation="core.xsd" namespace="http://www.cruxframework.org/crux"/>
<xs:import schemaLocation="gwt.xsd" namespace="http://www.cruxframework.org/crux/gwt"/>
<xs:import schemaLocation="smart-faces.xsd" namespace="http://www.cruxframework.org/crux/smart-faces"/>
<xs:element name="slider" type="Tslider">
</xs:element>
<xs:complexType name="Tslider">
<xs:sequence>
<xs:element name="widget" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_slider_SliderFactory_FieldWidgetChildProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="circularShowing" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="slideTransitionDuration" type="xs:int" default="500" >
</xs:attribute>
<xs:attribute name="showFirstWidget" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="simpleViewContainer" type="TsimpleViewContainer">
</xs:element>
<xs:complexType name="TsimpleViewContainer">
<xs:sequence>
<xs:element name="view" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_simplecontainer_SimpleViewContainerFactory_ViewProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="horizontalSwapPanel" type="ThorizontalSwapPanel">
</xs:element>
<xs:complexType name="ThorizontalSwapPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="transitionDuration" type="xs:int" default="500" >
</xs:attribute>
<xs:attribute name="useFadeTransitions" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSwap" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="dialogBox" type="TdialogBox">
<xs:annotation>
<xs:documentation>A Dialog box that can display one widget inside a dialog window.</xs:documentation>
</xs:annotation>
</xs:element>
<xs:complexType name="TdialogBox">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="movable" type="xs:boolean" default="true" >
<xs:annotation>
<xs:documentation>If true, the window can be dragged on the screen</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="resizable" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>If true, the window can be resized</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="closable" type="xs:boolean" default="true" >
<xs:annotation>
<xs:documentation>If true, a close button will be available at the dialog&apos;s top bar to close the window</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="title" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the Dialog title.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="colorPickerDialog" type="TcolorPickerDialog">
</xs:element>
<xs:complexType name="TcolorPickerDialog">
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="menuTabsDisposal" type="TmenuTabsDisposal">
</xs:element>
<xs:complexType name="TmenuTabsDisposal">
<xs:choice minOccurs="0" maxOccurs="unbounded" >
<xs:element name="header" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_disposal_menutabsdisposal_MenuTabsDisposalFactory_HeaderProcessor">
</xs:element>
<xs:element name="menuEntry" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_disposal_menutabsdisposal_MenuTabsDisposalFactory_MenuItemProcessor">
</xs:element>
<xs:element name="menuSection" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_disposal_menutabsdisposal_MenuTabsDisposalFactory_MenuSectionProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="dataGrid" type="TdataGrid">
</xs:element>
<xs:complexType name="TdataGrid">
<xs:sequence>
<xs:choice minOccurs="1" maxOccurs="unbounded" >
<xs:element name="dataColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_grid_GridFactory_DataColumnProcessor">
</xs:element>
<xs:element name="widgetColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_grid_GridFactory_WidgetColumnProcessor">
</xs:element>
</xs:choice>
<xs:element name="rowDetails" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_grid_GridFactory_RowDetailsProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="pageSize" type="xs:int" default="8" >
<xs:annotation>
<xs:documentation>the number of rows per page</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowSelection" type="org_cruxframework_crux_widgets_client_grid_RowSelectionModel" default="unselectable" >
<xs:annotation>
<xs:documentation>the behavior of the grid about line selection</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cellSpacing" type="xs:int" default="1" >
<xs:annotation>
<xs:documentation>the space between the cells</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoLoadData" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>if true, when a data source is set, its first page records are fetched and rendered</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stretchColumns" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation> if true, the width of the columns are auto adjusted to fit the grid width. Prevents horizontal scrolling.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="highlightRowOnMouseOver" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>If true,rows change their styles when mouse passed over them</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fixedCellSize" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation> equivalent of setting CSS attribute table-layout to fixed</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyDataFilling" type="xs:string" default=" " >
<xs:annotation>
<xs:documentation>Text shown when there&apos;s no data</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="defaultSortingColumn" type="xs:string" >
<xs:annotation>
<xs:documentation>the column to be used to automatically sort the grid&apos;s data when it is rendered for the first time</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="defaultSortingType" type="org_cruxframework_crux_widgets_client_grid_Grid_SortingType" default="ascending" >
<xs:annotation>
<xs:documentation>tells the grid if defaultSortingColumn should be used ascending or descending</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showRowDetailsIcon" type="xs:boolean" default="true" >
<xs:annotation>
<xs:documentation>if true, the second column of the grid will contain icons for expanding or collapsing the row&apos;s details</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="freezeHeaders" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>Freezes grid&apos;s headers</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="caseSensitive" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>indicate if the columns sort are or not key sensitive</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="keepEditorOnClickDisabledRows" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>Keep row&apos;s editor opened even when clicking on a disabled datarow</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showEditorButtons" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Displays a column with three buttons: edit, save and cancel</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editButtonTooltip" type="xs:string" default="false" >
<xs:annotation>
<xs:documentation>Tooltip message that will be showed on EDIT button</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="saveButtonTooltip" type="xs:string" default="false" >
<xs:annotation>
<xs:documentation>Tooltip message that will be showed on SAVE button</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cancelButtonTooltip" type="xs:string" default="false" >
<xs:annotation>
<xs:documentation>Tooltip message that will be showed on CANCEL button</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dataSource" type="xs:string" >
<xs:annotation>
<xs:documentation>A data grid component that allows pagination, edition, sort, frozen headers and datasource integration</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onRowClick" >
</xs:attribute>
<xs:attribute name="onRowDoubleClick" >
</xs:attribute>
<xs:attribute name="onRowRender" >
</xs:attribute>
<xs:attribute name="onBeforeRowSelect" >
</xs:attribute>
<xs:attribute name="onBeforeShowRowDetails" >
</xs:attribute>
<xs:attribute name="onShowRowDetails" >
</xs:attribute>
<xs:attribute name="onLoadRowDetails" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="singleSelect" type="TsingleSelect">
</xs:element>
<xs:complexType name="TsingleSelect">
<xs:sequence>
<xs:element name="item" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_select_SingleSelectFactory_SelectItemsProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="visibleItemCount" type="xs:int" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="maskedLabel" type="TmaskedLabel">
</xs:element>
<xs:complexType name="TmaskedLabel">
<xs:attribute name="text" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHorizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;li&gt;contentStart - Specifies that the widget&apos;s contents should be aligned left for LTR content, right for RTL content, and if the content&apos;s direction is DEFAULT, like localeStart&lt;/li&gt;&lt;li&gt;contentEnd - Specifies that the widget&apos;s contents should be aligned right for LTR content, left for RTL content, and if the content&apos;s direction is DEFAULT, like localeEnd&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="formatter" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>bind a formatter to this widget. Pass the formatter name (declared on Formatter class through @FormatterName annotation).</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="button" type="Tbutton">
</xs:element>
<xs:complexType name="Tbutton">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="preventDefaultTouchEvents" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelect" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="transferList" type="TtransferList">
</xs:element>
<xs:complexType name="TtransferList">
<xs:sequence>
<xs:element name="item" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_transferlist_TransferListFactory_TransferListItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="allowHorizontalScrollbar" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="leftToRightButtonText" type="xs:string" >
</xs:attribute>
<xs:attribute name="rightToLeftButtonText" type="xs:string" >
</xs:attribute>
<xs:attribute name="allLeftToRightButtonText" type="xs:string" >
</xs:attribute>
<xs:attribute name="allRightToLeftButtonText" type="xs:string" >
</xs:attribute>
<xs:attribute name="leftListLabel" type="xs:string" >
</xs:attribute>
<xs:attribute name="rightListLabel" type="xs:string" >
</xs:attribute>
<xs:attribute name="visibleItemCount" type="xs:int" >
</xs:attribute>
<xs:attribute name="multiTransferFromLeft" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="multiTransferFromRight" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="showAllTransferButtons" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBeforeMoveItems" >
</xs:attribute>
<xs:attribute name="onMoveItems" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="timer" type="Ttimer">
</xs:element>
<xs:complexType name="Ttimer">
<xs:sequence>
<xs:element name="onTimeout" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_timer_TimerFactory_TimerChildrenProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="start" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="initial" type="xs:int" default="0" >
</xs:attribute>
<xs:attribute name="regressive" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="pattern" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="tabViewContainer" type="TtabViewContainer">
</xs:element>
<xs:complexType name="TtabViewContainer">
<xs:sequence>
<xs:element name="view" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_tabcontainer_TabContainerFactory_TabsProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="horizontalSwapViewContainer" type="ThorizontalSwapViewContainer">
</xs:element>
<xs:complexType name="ThorizontalSwapViewContainer">
<xs:sequence>
<xs:element name="view" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_swapcontainer_HorizontalSwapContainerFactory_ViewProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="transitionDuration" type="xs:int" default="500" >
</xs:attribute>
<xs:attribute name="autoRemoveInactiveViews" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="animationEnabledForLargeDevices" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="animationEnabledForSmallDevices" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="inheritHeightForPanels" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChangeView" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="sortableList" type="TsortableList">
</xs:element>
<xs:complexType name="TsortableList">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="header" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="rssPanel" type="TrssPanel">
</xs:element>
<xs:complexType name="TrssPanel">
<xs:attribute name="maxTitleSize" type="xs:int" >
</xs:attribute>
<xs:attribute name="entryTitleStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="entryDateStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="title" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="titleStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="promoBanner" type="TpromoBanner">
</xs:element>
<xs:complexType name="TpromoBanner">
<xs:sequence>
<xs:element name="banner" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_promobanner_PromoBannerFactory_BannerProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="largeBannersHeight" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="smallBannersHeight" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="transitionDuration" type="xs:int" default="150" >
</xs:attribute>
<xs:attribute name="autoTransitionInterval" type="xs:int" default="5000" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="progressBar" type="TprogressBar">
</xs:element>
<xs:complexType name="TprogressBar">
<xs:attribute name="hideOnComplete" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="selectablePanel" type="TselectablePanel">
</xs:element>
<xs:complexType name="TselectablePanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="preventDefaultTouchEvents" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelect" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="styledPanel" type="TstyledPanel">
</xs:element>
<xs:complexType name="TstyledPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="unbounded">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="listShuttle" type="TlistShuttle">
</xs:element>
<xs:complexType name="TlistShuttle">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="availableHeader" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="selectedHeader" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="sequentialPager" type="TsequentialPager">
</xs:element>
<xs:complexType name="TsequentialPager">
<xs:attribute name="pageable" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onPage" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="maskedTextBox" type="TmaskedTextBox">
</xs:element>
<xs:complexType name="TmaskedTextBox">
<xs:attribute name="readOnly" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
</xs:attribute>
<xs:attribute name="maxLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="clearIfNotValid" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="formatter" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>bind a formatter to this widget. Pass the formatter name (declared on Formatter class through @FormatterName annotation).</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
</xs:complexType>
<xs:element name="image" type="Timage">
</xs:element>
<xs:complexType name="Timage">
<xs:attribute name="preventDefaultTouchEvents" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="url" type="xs:string" >
</xs:attribute>
<xs:attribute name="altText" type="xs:string" >
</xs:attribute>
<xs:attribute name="visibleRect" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoad" >
</xs:attribute>
<xs:attribute name="onError" >
</xs:attribute>
<xs:attribute name="onSelect" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="downloadButton" type="TdownloadButton">
</xs:element>
<xs:complexType name="TdownloadButton">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelect" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="numberTextBox" type="TnumberTextBox">
</xs:element>
<xs:complexType name="TnumberTextBox">
<xs:attribute name="value" type="xs:int" >
</xs:attribute>
<xs:attribute name="maxLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="viewChoiceDisposal" type="TviewChoiceDisposal">
</xs:element>
<xs:complexType name="TviewChoiceDisposal">
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="topMenuDisposal" type="TtopMenuDisposal">
</xs:element>
<xs:complexType name="TtopMenuDisposal">
<xs:sequence>
<xs:element name="menuEntry" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_disposal_topmenudisposal_TopMenuDisposalFactory_MenuItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="defaultView" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="dialogViewContainer" type="TdialogViewContainer">
</xs:element>
<xs:complexType name="TdialogViewContainer">
<xs:sequence>
<xs:element name="view" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_dialogcontainer_DialogViewContainerFactory_ViewProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="fileUploader" type="TfileUploader">
</xs:element>
<xs:complexType name="TfileUploader">
<xs:attribute name="multiple" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="autoUploadFiles" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="showProgressBar" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="fileInputText" type="xs:string" >
</xs:attribute>
<xs:attribute name="sendButtonText" type="xs:string" >
</xs:attribute>
<xs:attribute name="url" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAddFile" >
</xs:attribute>
<xs:attribute name="onRemoveFile" >
</xs:attribute>
<xs:attribute name="onUploadStart" >
</xs:attribute>
<xs:attribute name="onUploadComplete" >
</xs:attribute>
<xs:attribute name="onUploadCanceled" >
</xs:attribute>
<xs:attribute name="onUploadError" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="datePicker" type="TdatePicker">
</xs:element>
<xs:complexType name="TdatePicker">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelect" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="storyboard" type="Tstoryboard">
</xs:element>
<xs:complexType name="Tstoryboard">
<xs:choice minOccurs="0" maxOccurs="unbounded" >
<xs:element name="item" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_storyboard_StoryboardFactory_ItemProcessor">
</xs:element>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="unbounded">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:choice>
<xs:attribute name="largeDeviceItemWidth" type="xs:string" >
</xs:attribute>
<xs:attribute name="smallDeviceItemHeight" type="xs:string" >
</xs:attribute>
<xs:attribute name="largeDeviceItemHeight" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="center" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" default="middle" >
</xs:attribute>
<xs:attribute name="fixedWidth" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="fixedHeight" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="formDisplay" type="TformDisplay">
</xs:element>
<xs:complexType name="TformDisplay">
<xs:sequence>
<xs:element name="entry" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_formdisplay_FormDisplayFactory_EntryProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="scrollBanner" type="TscrollBanner">
</xs:element>
<xs:complexType name="TscrollBanner">
<xs:sequence>
<xs:element name="message" minOccurs="0" maxOccurs="unbounded" type="xs:string">
</xs:element>
</xs:sequence>
<xs:attribute name="messageScrollingPeriod" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="filter" type="Tfilter">
</xs:element>
<xs:complexType name="Tfilter">
<xs:attribute name="accessKey" type="xs:string" >
</xs:attribute>
<xs:attribute name="autoSelectEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="limit" type="xs:int" >
</xs:attribute>
<xs:attribute name="popupStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="filterable" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="adaptiveGrid" type="TadaptiveGrid">
</xs:element>
<xs:complexType name="TadaptiveGrid">
<xs:sequence >
<xs:element name="largeColumns" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_LargeColumnProcessor">
</xs:element>
<xs:element name="smallColumns" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_SmallColumnProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="pageSize" type="xs:int" default="8" >
</xs:attribute>
<xs:attribute name="rowSelection" type="org_cruxframework_crux_widgets_client_grid_RowSelectionModel" default="unselectable" >
</xs:attribute>
<xs:attribute name="cellSpacing" type="xs:int" default="1" >
</xs:attribute>
<xs:attribute name="autoLoadData" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="stretchColumns" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="highlightRowOnMouseOver" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="fixedCellSize" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="emptyDataFilling" type="xs:string" default=" " >
</xs:attribute>
<xs:attribute name="defaultSortingColumn" type="xs:string" >
</xs:attribute>
<xs:attribute name="defaultSortingType" type="org_cruxframework_crux_widgets_client_grid_Grid_SortingType" default="ascending" >
</xs:attribute>
<xs:attribute name="keepEditorOnClickDisabledRows" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="showEditorButtons" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="freezeHeaders" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="detailDialogTitle" type="xs:string" default=" " >
</xs:attribute>
<xs:attribute name="dataSource" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onRowRender" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="randomPager" type="TrandomPager">
</xs:element>
<xs:complexType name="TrandomPager">
<xs:attribute name="pageable" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onPage" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="swapViewContainer" type="TswapViewContainer">
</xs:element>
<xs:complexType name="TswapViewContainer">
<xs:sequence>
<xs:element name="view" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_swapcontainer_SwapContainerFactory_ViewProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="grid" type="Tgrid">
</xs:element>
<xs:complexType name="Tgrid">
<xs:sequence>
<xs:choice minOccurs="1" maxOccurs="unbounded" >
<xs:element name="dataColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_grid_GridFactory_DataColumnProcessor">
</xs:element>
<xs:element name="widgetColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_grid_GridFactory_WidgetColumnProcessor">
</xs:element>
</xs:choice>
<xs:element name="rowDetails" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_grid_GridFactory_RowDetailsProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="pageSize" type="xs:int" default="8" >
<xs:annotation>
<xs:documentation>the number of rows per page</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="rowSelection" type="org_cruxframework_crux_widgets_client_grid_RowSelectionModel" default="unselectable" >
<xs:annotation>
<xs:documentation>the behavior of the grid about line selection</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cellSpacing" type="xs:int" default="1" >
<xs:annotation>
<xs:documentation>the space between the cells</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoLoadData" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>if true, when a data source is set, its first page records are fetched and rendered</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="stretchColumns" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation> if true, the width of the columns are auto adjusted to fit the grid width. Prevents horizontal scrolling.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="highlightRowOnMouseOver" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>If true,rows change their styles when mouse passed over them</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="fixedCellSize" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation> equivalent of setting CSS attribute table-layout to fixed</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="emptyDataFilling" type="xs:string" default=" " >
<xs:annotation>
<xs:documentation>Text shown when there&apos;s no data</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="defaultSortingColumn" type="xs:string" >
<xs:annotation>
<xs:documentation>the column to be used to automatically sort the grid&apos;s data when it is rendered for the first time</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="defaultSortingType" type="org_cruxframework_crux_widgets_client_grid_Grid_SortingType" default="ascending" >
<xs:annotation>
<xs:documentation>tells the grid if defaultSortingColumn should be used ascending or descending</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showRowDetailsIcon" type="xs:boolean" default="true" >
<xs:annotation>
<xs:documentation>if true, the second column of the grid will contain icons for expanding or collapsing the row&apos;s details</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="freezeHeaders" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>Freezes grid&apos;s headers</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="caseSensitive" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>indicate if the columns sort are or not key sensitive</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="keepEditorOnClickDisabledRows" type="xs:boolean" default="false" >
<xs:annotation>
<xs:documentation>Keep row&apos;s editor opened even when clicking on a disabled datarow</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="showEditorButtons" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Displays a column with three buttons: edit, save and cancel</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editButtonTooltip" type="xs:string" default="false" >
<xs:annotation>
<xs:documentation>Tooltip message that will be showed on EDIT button</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="saveButtonTooltip" type="xs:string" default="false" >
<xs:annotation>
<xs:documentation>Tooltip message that will be showed on SAVE button</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="cancelButtonTooltip" type="xs:string" default="false" >
<xs:annotation>
<xs:documentation>Tooltip message that will be showed on CANCEL button</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="dataSource" type="xs:string" >
<xs:annotation>
<xs:documentation>A data grid component that allows pagination, edition, sort, frozen headers and datasource integration</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onRowClick" >
</xs:attribute>
<xs:attribute name="onRowDoubleClick" >
</xs:attribute>
<xs:attribute name="onRowRender" >
</xs:attribute>
<xs:attribute name="onBeforeRowSelect" >
</xs:attribute>
<xs:attribute name="onBeforeShowRowDetails" >
</xs:attribute>
<xs:attribute name="onShowRowDetails" >
</xs:attribute>
<xs:attribute name="onLoadRowDetails" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="anchor" type="Tanchor">
</xs:element>
<xs:complexType name="Tanchor">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="preventDefaultTouchEvents" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="href" type="xs:string" >
</xs:attribute>
<xs:attribute name="target" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this widget is enabled.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelect" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="rollingTabPanel" type="TrollingTabPanel">
</xs:element>
<xs:complexType name="TrollingTabPanel">
<xs:sequence>
<xs:element name="tab" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_rollingtabs_RollingTabPanelFactory_TabProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="visibleTab" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBeforeSelection" >
<xs:annotation>
<xs:documentation>Inform the handler for onBeforeSelection event. This event is fired when the user tries to select the widget, before the selection is triggered.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="slideshow" type="Tslideshow">
</xs:element>
<xs:complexType name="Tslideshow">
<xs:sequence>
<xs:element name="service" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_slideshow_SlideshowFactory_ServiceProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="scaleImages" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="autoPlay" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="loadOnStartup" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="layout" type="xs:string" >
</xs:attribute>
<xs:attribute name="preloadNextImages" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="transitionDelay" type="xs:int" default="5000" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="dateBox" type="TdateBox">
</xs:element>
<xs:complexType name="TdateBox">
<xs:sequence>
<xs:element name="datePicker" minOccurs="0" maxOccurs="1" type="_gwt:TdatePicker">
</xs:element>
</xs:sequence>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="pattern" type="xs:string" >
</xs:attribute>
<xs:attribute name="reportFormatError" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="readOnly" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadFormat" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
</xs:complexType>
<xs:element name="topToolBar" type="TtopToolBar">
</xs:element>
<xs:complexType name="TtopToolBar">
<xs:sequence>
<xs:element name="grip" minOccurs="1" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_toptoolbar_TopToolBarFactory_GripProcessor">
</xs:element>
<xs:element name="canvas" minOccurs="1" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_toptoolbar_TopToolBarFactory_CanvasProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="gripHeight" type="xs:int" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="stackMenu" type="TstackMenu">
</xs:element>
<xs:complexType name="TstackMenu">
<xs:sequence>
<xs:element name="item" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_stackmenu_StackMenuFactory_StackMenuItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="rollingPanel" type="TrollingPanel">
</xs:element>
<xs:complexType name="TrollingPanel">
<xs:choice minOccurs="0" maxOccurs="unbounded" >
<xs:element name="cell" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_rollingpanel_RollingPanelFactory_RollingCellProcessor">
</xs:element>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:choice>
<xs:attribute name="nextButtonStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="previousButtonStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="bodyStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="scrollToAddedWidgets" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="spacing" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="textArea" type="TtextArea">
</xs:element>
<xs:complexType name="TtextArea">
<xs:simpleContent>
<xs:extension base="xs:string">
<xs:attribute name="characterWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="visibleLines" type="xs:int" >
</xs:attribute>
<xs:attribute name="maxLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="textAlignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="placeHolder" type="xs:string" >
</xs:attribute>
<xs:attribute name="readOnly" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="alignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:extension>
</xs:simpleContent>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_rollingpanel_RollingPanelFactory_RollingCellProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="height" type="xs:string" >
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_stackmenu_StackMenuFactory_StackMenuItemProcessor">
<xs:sequence>
<xs:element name="item" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_stackmenu_StackMenuFactory_StackMenuItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="key" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="label" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="open" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_toptoolbar_TopToolBarFactory_CanvasProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="unbounded">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_toptoolbar_TopToolBarFactory_GripProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_slideshow_SlideshowFactory_ServiceProcessor">
<xs:sequence>
<xs:element name="param" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_slideshow_SlideshowFactory_ServiceParameterProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_slideshow_SlideshowFactory_ServiceParameterProcessor">
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_rollingtabs_RollingTabPanelFactory_TabProcessor">
<xs:sequence>
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="tabText" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="tabHtml" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="tabWidget" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_rollingtabs_RollingTabPanelFactory_WidgetTitleTabProcessor">
</xs:element>
</xs:choice>
<xs:element name="panelContent" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_rollingtabs_RollingTabPanelFactory_TabWidgetProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="tabEnabled" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="tabWordWrap" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onKeyUp" >
</xs:attribute>
<xs:attribute name="onKeyDown" >
</xs:attribute>
<xs:attribute name="onKeyPress" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_rollingtabs_RollingTabPanelFactory_TabWidgetProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_rollingtabs_RollingTabPanelFactory_WidgetTitleTabProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_grid_GridFactory_RowDetailsProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_grid_GridFactory_WidgetColumnProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="label" type="xs:string" >
</xs:attribute>
<xs:attribute name="key" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_grid_GridFactory_DataColumnProcessor">
<xs:sequence>
<xs:element name="editor" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_widgets_rebind_grid_GridFactory_DataColumnEditorProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="sortable" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="wrapLine" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="frozen" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="label" type="xs:string" >
</xs:attribute>
<xs:attribute name="key" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="formatter" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_grid_GridFactory_DataColumnEditorProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_swapcontainer_SwapContainerFactory_ViewProcessor">
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="active" type="xs:boolean" default="false" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_SmallColumnProcessor">
<xs:choice minOccurs="1" maxOccurs="unbounded" >
<xs:element name="dataColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_DataColumnProcessor">
</xs:element>
<xs:element name="widgetColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_WidgetColumnProcessor">
</xs:element>
<xs:element name="actionColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_ActionColumnProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_ActionColumnProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="key" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_WidgetColumnProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="label" type="xs:string" >
</xs:attribute>
<xs:attribute name="key" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_DataColumnProcessor">
<xs:sequence>
</xs:sequence>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="sortable" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="wrapLine" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="frozen" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="label" type="xs:string" >
</xs:attribute>
<xs:attribute name="key" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="formatter" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_LargeColumnProcessor">
<xs:choice minOccurs="1" maxOccurs="unbounded" >
<xs:element name="dataColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_DataColumnProcessor">
</xs:element>
<xs:element name="widgetColumn" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_widgets_rebind_deviceadaptivegrid_DeviceAdaptiveGridFactory_WidgetColumnProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_formdisplay_FormDisplayFactory_EntryProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="label" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="left" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_storyboard_StoryboardFactory_ItemProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="height" type="xs:string" >
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_dialogcontainer_DialogViewContainerFactory_ViewProcessor">
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_disposal_topmenudisposal_TopMenuDisposalFactory_MenuItemProcessor">
<xs:attribute name="label" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="targetView" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_promobanner_PromoBannerFactory_BannerProcessor">
<xs:attribute name="image" type="xs:string" >
</xs:attribute>
<xs:attribute name="smallImage" type="xs:string" >
</xs:attribute>
<xs:attribute name="largeImage" type="xs:string" >
</xs:attribute>
<xs:attribute name="title" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="buttonLabel" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="onSelect" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_swapcontainer_HorizontalSwapContainerFactory_ViewProcessor">
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="active" type="xs:boolean" default="false" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_tabcontainer_TabContainerFactory_TabsProcessor">
<xs:attribute name="id" type="xs:string" >
</xs:attribute>
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="closeable" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="lazy" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="onBeforeFocus" >
</xs:attribute>
<xs:attribute name="onBeforeBlur" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_timer_TimerFactory_TimerChildrenProcessor">
<xs:attribute name="time" type="xs:int" use="required" >
</xs:attribute>
<xs:attribute name="execute" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_transferlist_TransferListFactory_TransferListItemProcessor">
<xs:attribute name="label" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="location" type="org_cruxframework_crux_widgets_client_transferlist_TransferList_ItemLocation" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_select_SingleSelectFactory_SelectItemsProcessor">
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="label" type="xs:string" >
</xs:attribute>
<xs:attribute name="selected" type="xs:boolean" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_disposal_menutabsdisposal_MenuTabsDisposalFactory_MenuSectionProcessor">
<xs:attribute name="label" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="additionalStyleName" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_disposal_menutabsdisposal_MenuTabsDisposalFactory_MenuItemProcessor">
<xs:attribute name="label" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="targetView" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_disposal_menutabsdisposal_MenuTabsDisposalFactory_HeaderProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_simplecontainer_SimpleViewContainerFactory_ViewProcessor">
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_widgets_rebind_slider_SliderFactory_FieldWidgetChildProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="unbounded">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:simpleType name="com_google_gwt_i18n_client_HasDirection_Direction">
<xs:restriction base="xs:string">
<xs:enumeration value="RTL" />
<xs:enumeration value="LTR" />
<xs:enumeration value="DEFAULT" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment">
<xs:restriction base="xs:string">
<xs:enumeration value="center" />
<xs:enumeration value="justify" />
<xs:enumeration value="left" />
<xs:enumeration value="right" />
<xs:enumeration value="localeStart" />
<xs:enumeration value="localeEnd" />
<xs:enumeration value="defaultAlign" />
<xs:enumeration value="contentStart" />
<xs:enumeration value="contentEnd" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_widgets_client_transferlist_TransferList_ItemLocation">
<xs:restriction base="xs:string">
<xs:enumeration value="left" />
<xs:enumeration value="right" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment">
<xs:restriction base="xs:string">
<xs:enumeration value="center" />
<xs:enumeration value="justify" />
<xs:enumeration value="left" />
<xs:enumeration value="right" />
<xs:enumeration value="localeStart" />
<xs:enumeration value="localeEnd" />
<xs:enumeration value="defaultAlign" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_widgets_client_grid_RowSelectionModel">
<xs:restriction base="xs:string">
<xs:enumeration value="unselectable" />
<xs:enumeration value="single" />
<xs:enumeration value="singleRadioButton" />
<xs:enumeration value="multiple" />
<xs:enumeration value="multipleCheckBox" />
<xs:enumeration value="multipleCheckBoxSelectAll" />
<xs:enumeration value="singleCheckBox" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator">
<xs:restriction base="xs:string">
<xs:enumeration value="anyRtl" />
<xs:enumeration value="firstStrong" />
<xs:enumeration value="wordCount" />
<xs:enumeration value="defaultAlign" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_widgets_client_grid_Grid_SortingType">
<xs:restriction base="xs:string">
<xs:enumeration value="ascending" />
<xs:enumeration value="descending" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign">
<xs:restriction base="xs:string">
<xs:enumeration value="center" />
<xs:enumeration value="justify" />
<xs:enumeration value="left" />
<xs:enumeration value="right" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment">
<xs:restriction base="xs:string">
<xs:enumeration value="bottom" />
<xs:enumeration value="middle" />
<xs:enumeration value="top" />
</xs:restriction>
</xs:simpleType>
</xs:schema>
