<xs:schema 
xmlns="http://www.cruxframework.org/crux/gwt" 
xmlns:xs="http://www.w3.org/2001/XMLSchema" 
xmlns:c="http://www.cruxframework.org/crux" 
xmlns:_widgets="http://www.cruxframework.org/crux/widgets" 
xmlns:_smart-faces="http://www.cruxframework.org/crux/smart-faces" 
attributeFormDefault="unqualified" 
elementFormDefault="qualified" 
targetNamespace="http://www.cruxframework.org/crux/gwt" >
<xs:import schemaLocation="core.xsd" namespace="http://www.cruxframework.org/crux"/>
<xs:import schemaLocation="widgets.xsd" namespace="http://www.cruxframework.org/crux/widgets"/>
<xs:import schemaLocation="smart-faces.xsd" namespace="http://www.cruxframework.org/crux/smart-faces"/>
<xs:element name="dockPanel" type="TdockPanel">
</xs:element>
<xs:complexType name="TdockPanel">
<xs:choice minOccurs="0" maxOccurs="unbounded" >
<xs:element name="cell" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_DockPanelFactory_DockCellProcessor">
</xs:element>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:choice>
<xs:attribute name="borderWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="spacing" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="focusPanel" type="TfocusPanel">
</xs:element>
<xs:complexType name="TfocusPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="popupPanel" type="TpopupPanel">
</xs:element>
<xs:complexType name="TpopupPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="previewingAllNativeEvents" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHideOnHistoryEventsEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="glassStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="glassEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="modal" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHide" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="lazyPanel" type="TlazyPanel">
</xs:element>
<xs:complexType name="TlazyPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="dialogBox" type="TdialogBox">
</xs:element>
<xs:complexType name="TdialogBox">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="previewingAllNativeEvents" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHideOnHistoryEventsEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="glassStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="glassEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="modal" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHide" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="absolutePanel" type="TabsolutePanel">
</xs:element>
<xs:complexType name="TabsolutePanel">
<xs:sequence>
<xs:element name="widget" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_AbsolutePanelFactory_AbsoluteChildrenProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="HTML" type="THTML">
</xs:element>
<xs:complexType name="THTML">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoHorizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;li&gt;contentStart - Specifies that the widget&apos;s contents should be aligned left for LTR content, right for RTL content, and if the content&apos;s direction is DEFAULT, like localeStart&lt;/li&gt;&lt;li&gt;contentEnd - Specifies that the widget&apos;s contents should be aligned right for LTR content, left for RTL content, and if the content&apos;s direction is DEFAULT, like localeEnd&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="cellTable" type="TcellTable">
</xs:element>
<xs:complexType name="TcellTable">
<xs:sequence>
<xs:element name="column" minOccurs="1" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_CellTableFactory_ColumnsProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="dataProviderFactoryMethod" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="autoLoad" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="tableLayoutFixed" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="pageSize" type="xs:int" >
</xs:attribute>
<xs:attribute name="pageStart" type="xs:int" >
</xs:attribute>
<xs:attribute name="rowCount" type="xs:int" >
</xs:attribute>
<xs:attribute name="dataObject" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="keyboardPagingPolicy" type="com_google_gwt_user_cellview_client_HasKeyboardPagingPolicy_KeyboardPagingPolicy" >
</xs:attribute>
<xs:attribute name="keyboardSelectionPolicy" type="com_google_gwt_user_cellview_client_HasKeyboardSelectionPolicy_KeyboardSelectionPolicy" >
</xs:attribute>
<xs:attribute name="selectionModel" type="org_cruxframework_crux_core_rebind_screen_widget_creator_HasDataFactory_SelectionModel" use="required" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;multiSelection - allows multiple items to be selected&lt;/li&gt;&lt;li&gt;noSelection -  does not allow selection, but fires selection change events. Use this model if you want to know when a user selects an item, but do not want the view to update based on the selection&lt;/li&gt;&lt;li&gt;singleSelection - allows only one item to be selected a time&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="estimatedRowCount" type="xs:int" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelectionChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onSelectionChange event. This event is fired when the widget&apos;s selection is changed.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onRangeChange" >
</xs:attribute>
<xs:attribute name="onRowCountChange" >
</xs:attribute>
<xs:attribute name="onCellPreview" >
<xs:annotation>
<xs:documentation>Inform the handler for onCellPreview event. This event is fired just before any Cell event occurs.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="fileUpload" type="TfileUpload">
</xs:element>
<xs:complexType name="TfileUpload">
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="stackLayoutPanel" type="TstackLayoutPanel">
</xs:element>
<xs:complexType name="TstackLayoutPanel">
<xs:sequence>
<xs:element name="item" minOccurs="1" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_StackLayoutPanelFactory_StackItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="unit" type="com_google_gwt_dom_client_Style_Unit" default="PX" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBeforeSelection" >
<xs:annotation>
<xs:documentation>Inform the handler for onBeforeSelection event. This event is fired when the user tries to select the widget, before the selection is triggered.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="menuBar" type="TmenuBar">
</xs:element>
<xs:complexType name="TmenuBar">
<xs:choice minOccurs="0" maxOccurs="unbounded" >
<xs:element name="menuItem" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_MenuBarFactory_MenutItemProcessor">
</xs:element>
<xs:element name="separator" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_MenuBarFactory_MenutItemSeparatorProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="vertical" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoOpen" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="focusOnHoverEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="listBox" type="TlistBox">
</xs:element>
<xs:complexType name="TlistBox">
<xs:sequence>
<xs:element name="item" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_ListBoxFactory_ListBoxItemsProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="multiple" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="visibleItemCount" type="xs:int" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="deckPanel" type="TdeckPanel">
</xs:element>
<xs:complexType name="TdeckPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="unbounded">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="visibleWidget" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="resetButton" type="TresetButton">
</xs:element>
<xs:complexType name="TresetButton">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="inlineHTML" type="TinlineHTML">
</xs:element>
<xs:complexType name="TinlineHTML">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoHorizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;li&gt;contentStart - Specifies that the widget&apos;s contents should be aligned left for LTR content, right for RTL content, and if the content&apos;s direction is DEFAULT, like localeStart&lt;/li&gt;&lt;li&gt;contentEnd - Specifies that the widget&apos;s contents should be aligned right for LTR content, left for RTL content, and if the content&apos;s direction is DEFAULT, like localeEnd&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="hyperlink" type="Thyperlink">
</xs:element>
<xs:complexType name="Thyperlink">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="targetHistoryToken" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="image" type="Timage">
</xs:element>
<xs:complexType name="Timage">
<xs:attribute name="url" type="xs:string" >
</xs:attribute>
<xs:attribute name="altText" type="xs:string" >
</xs:attribute>
<xs:attribute name="visibleRect" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoad" >
</xs:attribute>
<xs:attribute name="onError" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="pageSizePager" type="TpageSizePager">
</xs:element>
<xs:complexType name="TpageSizePager">
<xs:attribute name="increment" type="xs:int" use="required" >
</xs:attribute>
<xs:attribute name="pageSize" type="xs:int" >
</xs:attribute>
<xs:attribute name="display" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="rangeLimited" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="canvas" type="Tcanvas">
</xs:element>
<xs:complexType name="Tcanvas">
<xs:attribute name="coordinateSpaceHeight" type="xs:int" >
</xs:attribute>
<xs:attribute name="coordinateSpaceWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="formPanel" type="TformPanel">
</xs:element>
<xs:complexType name="TformPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="target" type="xs:string" >
</xs:attribute>
<xs:attribute name="method" type="xs:string" >
</xs:attribute>
<xs:attribute name="encoding" type="xs:string" >
</xs:attribute>
<xs:attribute name="action" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSubmitComplete" >
</xs:attribute>
<xs:attribute name="onSubmit" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="decoratedTabBar" type="TdecoratedTabBar">
</xs:element>
<xs:complexType name="TdecoratedTabBar">
<xs:sequence>
<xs:element name="tab" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_DecoratedTabBarFactory_TabProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="visibleTab" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBeforeSelection" >
<xs:annotation>
<xs:documentation>Inform the handler for onBeforeSelection event. This event is fired when the user tries to select the widget, before the selection is triggered.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="textBox" type="TtextBox">
<xs:annotation>
<xs:documentation>A standard single-line text box.</xs:documentation>
<xs:appinfo source="http://gwt.googleusercontent.com/samples/Showcase/Showcase.html#!CwBasicText">See more</xs:appinfo>
</xs:annotation>
</xs:element>
<xs:complexType name="TtextBox">
<xs:attribute name="maxLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="visibleLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="textAlignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="placeHolder" type="xs:string" >
</xs:attribute>
<xs:attribute name="readOnly" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="alignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="simplePager" type="TsimplePager">
</xs:element>
<xs:complexType name="TsimplePager">
<xs:attribute name="textlocation" type="com_google_gwt_user_cellview_client_SimplePager_TextLocation" >
</xs:attribute>
<xs:attribute name="page" type="xs:int" >
</xs:attribute>
<xs:attribute name="pageStart" type="xs:int" >
</xs:attribute>
<xs:attribute name="pageSize" type="xs:int" >
</xs:attribute>
<xs:attribute name="display" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="rangeLimited" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="horizontalPanel" type="ThorizontalPanel">
</xs:element>
<xs:complexType name="ThorizontalPanel">
<xs:choice minOccurs="0" maxOccurs="unbounded" >
<xs:element name="cell" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_HorizontalPanelFactory_HorizontalProcessor">
</xs:element>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:choice>
<xs:attribute name="borderWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="spacing" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="tree" type="Ttree">
</xs:element>
<xs:complexType name="Ttree">
<xs:sequence>
<xs:element name="item" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_TreeFactory_TreeItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="useLeafImages" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
</xs:attribute>
<xs:attribute name="openSelectedItem" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadImage" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onOpen" >
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="datePicker" type="TdatePicker">
</xs:element>
<xs:complexType name="TdatePicker">
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="currentMonth" type="xs:string" >
</xs:attribute>
<xs:attribute name="datePattern" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
<xs:attribute name="onShowRange" >
</xs:attribute>
<xs:attribute name="onHighlight" >
</xs:attribute>
</xs:complexType>
<xs:element name="decoratedPopupPanel" type="TdecoratedPopupPanel">
</xs:element>
<xs:complexType name="TdecoratedPopupPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="previewingAllNativeEvents" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHideOnHistoryEventsEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="glassStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="glassEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="modal" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHide" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="inlineHyperlink" type="TinlineHyperlink">
</xs:element>
<xs:complexType name="TinlineHyperlink">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="targetHistoryToken" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="notificationMole" type="TnotificationMole">
</xs:element>
<xs:complexType name="TnotificationMole">
<xs:attribute name="show" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="animationDuration" type="xs:int" >
</xs:attribute>
<xs:attribute name="message" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="pushButton" type="TpushButton">
</xs:element>
<xs:complexType name="TpushButton">
<xs:choice minOccurs="0" maxOccurs="6" >
<xs:element name="up" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_UpFaceProcessor">
</xs:element>
<xs:element name="upDisabled" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_UpDisabledFaceProcessor">
</xs:element>
<xs:element name="upHovering" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_UpHoveringFaceProcessor">
</xs:element>
<xs:element name="down" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_DownFaceProcessor">
</xs:element>
<xs:element name="downDisabled" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_DownDisabledFaceProcessor">
</xs:element>
<xs:element name="downHovering" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_DownHoveringFaceProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="cellWidget" type="TcellWidget">
</xs:element>
<xs:complexType name="TcellWidget">
<xs:choice minOccurs="1" maxOccurs="1" >
<xs:element name="customCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_CustomCellProcessor">
</xs:element>
<xs:element name="buttonCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ButtonCellProcessor">
</xs:element>
<xs:element name="textCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_TextCellProcessor">
</xs:element>
<xs:element name="clickableTextCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ClickableTextCellProcessor">
</xs:element>
<xs:element name="selectionCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_SelectionCellProcessor">
</xs:element>
<xs:element name="textInputCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_TextInputCellProcessor">
</xs:element>
<xs:element name="checkboxCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_CheckboxCellProcessor">
</xs:element>
<xs:element name="datePickerCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_DatePickerCellProcessor">
</xs:element>
<xs:element name="editTextCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_EditTextCellProcessor">
</xs:element>
<xs:element name="actionCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ActionCellProcessor">
</xs:element>
<xs:element name="dateCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_DateCellProcessor">
</xs:element>
<xs:element name="imageCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageCellProcessor">
</xs:element>
<xs:element name="imageLoadingCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageLoadingCellProcessor">
</xs:element>
<xs:element name="imageResourceCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageResourceCellProcessor">
</xs:element>
<xs:element name="numberCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_NumberCellProcessor">
</xs:element>
<xs:element name="safeHtmlCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_SafeHtmlCellProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="dataObject" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="checkBox" type="TcheckBox">
</xs:element>
<xs:complexType name="TcheckBox">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="checked" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="formValue" type="xs:string" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
</xs:complexType>
<xs:element name="dateBox" type="TdateBox">
</xs:element>
<xs:complexType name="TdateBox">
<xs:sequence>
<xs:element name="datePicker" minOccurs="0" maxOccurs="1" type="TdatePicker">
</xs:element>
</xs:sequence>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="pattern" type="xs:string" >
</xs:attribute>
<xs:attribute name="reportFormatError" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadFormat" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
</xs:complexType>
<xs:element name="disclosurePanel" type="TdisclosurePanel">
</xs:element>
<xs:complexType name="TdisclosurePanel">
<xs:sequence>
<xs:element name="widgetHeader" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_DisclosurePanelFactory_HeaderProcessor">
</xs:element>
<xs:element name="widgetContent" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_DisclosurePanelFactory_ContentProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="headerText" type="xs:string" >
</xs:attribute>
<xs:attribute name="open" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onOpen" >
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="HTMLPanel" type="THTMLPanel">
<xs:annotation>
<xs:documentation>A panel that contains HTML, and which can attach child widgets to identified elements within that HTML.</xs:documentation>
</xs:annotation>
</xs:element>
<xs:complexType name="THTMLPanel">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" />
</xs:sequence>
<xs:attribute name="tag" type="xs:string" >
<xs:annotation>
<xs:documentation>the tag of the root element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="useLazyLoadingStrategy" type="xs:boolean" default="false" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="tabLayoutPanel" type="TtabLayoutPanel">
</xs:element>
<xs:complexType name="TtabLayoutPanel">
<xs:sequence>
<xs:element name="tab" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_TabLayoutPanelFactory_TabProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="barHeight" type="xs:int" default="20" >
</xs:attribute>
<xs:attribute name="unit" type="com_google_gwt_dom_client_Style_Unit" >
</xs:attribute>
<xs:attribute name="visibleTab" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBeforeSelection" >
<xs:annotation>
<xs:documentation>Inform the handler for onBeforeSelection event. This event is fired when the user tries to select the widget, before the selection is triggered.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="passwordTextBox" type="TpasswordTextBox">
</xs:element>
<xs:complexType name="TpasswordTextBox">
<xs:attribute name="maxLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="visibleLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="textAlignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="placeHolder" type="xs:string" >
</xs:attribute>
<xs:attribute name="readOnly" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="alignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="frame" type="Tframe">
</xs:element>
<xs:complexType name="Tframe">
<xs:attribute name="url" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="simpleRadioButton" type="TsimpleRadioButton">
</xs:element>
<xs:complexType name="TsimpleRadioButton">
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="checked" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="integerBox" type="TintegerBox">
</xs:element>
<xs:complexType name="TintegerBox">
<xs:attribute name="value" type="xs:int" >
</xs:attribute>
<xs:attribute name="maxLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="visibleLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="readOnly" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="alignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="hidden" type="Thidden">
</xs:element>
<xs:complexType name="Thidden">
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="defaultValue" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="suggestBox" type="TsuggestBox">
</xs:element>
<xs:complexType name="TsuggestBox">
<xs:attribute name="accessKey" type="xs:string" >
</xs:attribute>
<xs:attribute name="autoSelectEnabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="limit" type="xs:int" >
</xs:attribute>
<xs:attribute name="popupStyleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadOracle" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="decoratorPanel" type="TdecoratorPanel">
</xs:element>
<xs:complexType name="TdecoratorPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="splitLayoutPanel" type="TsplitLayoutPanel">
</xs:element>
<xs:complexType name="TsplitLayoutPanel">
<xs:sequence>
<xs:element name="cell" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_SplitLayoutPanelFactory_SplitLayoutPanelProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="animationDuration" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAnimationComplete" >
</xs:attribute>
<xs:attribute name="onAnimationStep" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="doubleBox" type="TdoubleBox">
</xs:element>
<xs:complexType name="TdoubleBox">
<xs:attribute name="value" type="xs:double" >
</xs:attribute>
<xs:attribute name="maxLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="visibleLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="readOnly" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="alignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="tabBar" type="TtabBar">
</xs:element>
<xs:complexType name="TtabBar">
<xs:sequence>
<xs:element name="tab" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_TabBarFactory_TabProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="visibleTab" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBeforeSelection" >
<xs:annotation>
<xs:documentation>Inform the handler for onBeforeSelection event. This event is fired when the user tries to select the widget, before the selection is triggered.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="captionPanel" type="TcaptionPanel">
</xs:element>
<xs:complexType name="TcaptionPanel">
<xs:sequence>
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="captionText" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="captionHTML" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
</xs:choice>
<xs:element name="widget" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_CaptionPanelFactory_ContentProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="captionText" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="richTextArea" type="TrichTextArea">
</xs:element>
<xs:complexType name="TrichTextArea">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="backColor" type="xs:string" >
</xs:attribute>
<xs:attribute name="fontName" type="xs:string" >
</xs:attribute>
<xs:attribute name="fontSize" type="xs:int" >
</xs:attribute>
<xs:attribute name="foreColor" type="xs:string" >
</xs:attribute>
<xs:attribute name="justification" type="xs:string" >
</xs:attribute>
<xs:attribute name="bold" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="italic" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="subscript" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="superscript" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="underline" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="strikethrough" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onInitialize" >
</xs:attribute>
</xs:complexType>
<xs:element name="flowPanel" type="TflowPanel">
</xs:element>
<xs:complexType name="TflowPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="unbounded">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="video" type="Tvideo">
</xs:element>
<xs:complexType name="Tvideo">
<xs:attribute name="autoplay" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="showControls" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="currentTime" type="xs:double" >
</xs:attribute>
<xs:attribute name="defaultPlaybackRate" type="xs:double" >
</xs:attribute>
<xs:attribute name="loop" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="muted" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="playbackRate" type="xs:double" >
</xs:attribute>
<xs:attribute name="preload" type="org_cruxframework_crux_gwt_rebind_VideoFactory_PreLoadType" >
</xs:attribute>
<xs:attribute name="src" type="xs:string" >
</xs:attribute>
<xs:attribute name="volume" type="xs:double" >
</xs:attribute>
<xs:attribute name="poster" type="xs:string" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="numberLabel" type="TnumberLabel">
</xs:element>
<xs:complexType name="TnumberLabel">
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="numberPattern" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHorizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;li&gt;contentStart - Specifies that the widget&apos;s contents should be aligned left for LTR content, right for RTL content, and if the content&apos;s direction is DEFAULT, like localeStart&lt;/li&gt;&lt;li&gt;contentEnd - Specifies that the widget&apos;s contents should be aligned right for LTR content, left for RTL content, and if the content&apos;s direction is DEFAULT, like localeEnd&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="headerPanel" type="TheaderPanel">
</xs:element>
<xs:complexType name="TheaderPanel">
<xs:sequence>
<xs:element name="header" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_HeaderPanelFactory_HeaderProcessor">
</xs:element>
<xs:element name="content" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_HeaderPanelFactory_ContentProcessor">
</xs:element>
<xs:element name="footer" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_HeaderPanelFactory_FooterProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="button" type="Tbutton">
</xs:element>
<xs:complexType name="Tbutton">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="radioButton" type="TradioButton">
</xs:element>
<xs:complexType name="TradioButton">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="checked" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="formValue" type="xs:string" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
</xs:attribute>
</xs:complexType>
<xs:element name="textButton" type="TtextButton">
</xs:element>
<xs:complexType name="TtextButton">
<xs:attribute name="decoration" type="com_google_gwt_cell_client_ButtonCellBase_Decoration" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="collapseLeft" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="collapseRight" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="namedFrame" type="TnamedFrame">
</xs:element>
<xs:complexType name="TnamedFrame">
<xs:attribute name="name" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="url" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="horizontalSplitPanel" type="ThorizontalSplitPanel">
</xs:element>
<xs:complexType name="ThorizontalSplitPanel">
<xs:sequence>
<xs:element name="left" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_HorizontalSplitPanelFactory_LeftProcessor">
</xs:element>
<xs:element name="right" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_HorizontalSplitPanelFactory_RightProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="stackPanel" type="TstackPanel">
</xs:element>
<xs:complexType name="TstackPanel">
<xs:sequence>
<xs:element name="stackItem" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_StackPanelFactory_StackItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="visibleStack" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="audio" type="Taudio">
</xs:element>
<xs:complexType name="Taudio">
<xs:attribute name="autoplay" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="showControls" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="currentTime" type="xs:double" >
</xs:attribute>
<xs:attribute name="defaultPlaybackRate" type="xs:double" >
</xs:attribute>
<xs:attribute name="loop" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="muted" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="playbackRate" type="xs:double" >
</xs:attribute>
<xs:attribute name="preload" type="org_cruxframework_crux_gwt_rebind_AudioFactory_PreLoadType" >
</xs:attribute>
<xs:attribute name="src" type="xs:string" >
</xs:attribute>
<xs:attribute name="volume" type="xs:double" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="decoratedStackPanel" type="TdecoratedStackPanel">
</xs:element>
<xs:complexType name="TdecoratedStackPanel">
<xs:sequence>
<xs:element name="stackItem" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_DecoratedStackPanelFactory_StackItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="visibleStack" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="decoratedTabPanel" type="TdecoratedTabPanel">
</xs:element>
<xs:complexType name="TdecoratedTabPanel">
<xs:sequence>
<xs:element name="tab" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_DecoratedTabPanelFactory_TabProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="visibleTab" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBeforeSelection" >
<xs:annotation>
<xs:documentation>Inform the handler for onBeforeSelection event. This event is fired when the user tries to select the widget, before the selection is triggered.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="simplePanel" type="TsimplePanel">
</xs:element>
<xs:complexType name="TsimplePanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="inlineLabel" type="TinlineLabel">
</xs:element>
<xs:complexType name="TinlineLabel">
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoHorizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;li&gt;contentStart - Specifies that the widget&apos;s contents should be aligned left for LTR content, right for RTL content, and if the content&apos;s direction is DEFAULT, like localeStart&lt;/li&gt;&lt;li&gt;contentEnd - Specifies that the widget&apos;s contents should be aligned right for LTR content, left for RTL content, and if the content&apos;s direction is DEFAULT, like localeEnd&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="submitButton" type="TsubmitButton">
</xs:element>
<xs:complexType name="TsubmitButton">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="nativeHorizontalScrollbar" type="TnativeHorizontalScrollbar">
</xs:element>
<xs:complexType name="TnativeHorizontalScrollbar">
<xs:attribute name="scrollWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="horizontalScrollPosition" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onScroll" >
</xs:attribute>
</xs:complexType>
<xs:element name="verticalSplitPanel" type="TverticalSplitPanel">
</xs:element>
<xs:complexType name="TverticalSplitPanel">
<xs:sequence>
<xs:element name="top" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_VerticalSplitPanelFactory_TopProcessor">
</xs:element>
<xs:element name="bottom" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_VerticalSplitPanelFactory_BottomProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="cellBrowser" type="TcellBrowser">
</xs:element>
<xs:complexType name="TcellBrowser">
<xs:attribute name="defaultColumnWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="minimumColumnWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="treeViewModelFactoryMethod" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="getValueMethod" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="keyboardSelectionPolicy" type="com_google_gwt_user_cellview_client_HasKeyboardSelectionPolicy_KeyboardSelectionPolicy" >
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onOpen" >
</xs:attribute>
</xs:complexType>
<xs:element name="longBox" type="TlongBox">
</xs:element>
<xs:complexType name="TlongBox">
<xs:attribute name="value" type="xs:long" >
</xs:attribute>
<xs:attribute name="maxLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="visibleLength" type="xs:int" >
</xs:attribute>
<xs:attribute name="readOnly" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="alignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="label" type="Tlabel">
</xs:element>
<xs:complexType name="Tlabel">
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="autoHorizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;li&gt;contentStart - Specifies that the widget&apos;s contents should be aligned left for LTR content, right for RTL content, and if the content&apos;s direction is DEFAULT, like localeStart&lt;/li&gt;&lt;li&gt;contentEnd - Specifies that the widget&apos;s contents should be aligned right for LTR content, left for RTL content, and if the content&apos;s direction is DEFAULT, like localeEnd&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="cellList" type="TcellList">
</xs:element>
<xs:complexType name="TcellList">
<xs:choice minOccurs="1" maxOccurs="1" >
<xs:element name="customCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_CustomCellProcessor">
</xs:element>
<xs:element name="buttonCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ButtonCellProcessor">
</xs:element>
<xs:element name="textCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_TextCellProcessor">
</xs:element>
<xs:element name="clickableTextCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ClickableTextCellProcessor">
</xs:element>
<xs:element name="selectionCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_SelectionCellProcessor">
</xs:element>
<xs:element name="textInputCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_TextInputCellProcessor">
</xs:element>
<xs:element name="checkboxCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_CheckboxCellProcessor">
</xs:element>
<xs:element name="datePickerCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_DatePickerCellProcessor">
</xs:element>
<xs:element name="editTextCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_EditTextCellProcessor">
</xs:element>
<xs:element name="actionCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ActionCellProcessor">
</xs:element>
<xs:element name="dateCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_DateCellProcessor">
</xs:element>
<xs:element name="imageCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageCellProcessor">
</xs:element>
<xs:element name="imageLoadingCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageLoadingCellProcessor">
</xs:element>
<xs:element name="imageResourceCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageResourceCellProcessor">
</xs:element>
<xs:element name="numberCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_NumberCellProcessor">
</xs:element>
<xs:element name="safeHtmlCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_SafeHtmlCellProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="pageSize" type="xs:int" >
</xs:attribute>
<xs:attribute name="pageStart" type="xs:int" >
</xs:attribute>
<xs:attribute name="rowCount" type="xs:int" >
</xs:attribute>
<xs:attribute name="dataObject" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="keyboardPagingPolicy" type="com_google_gwt_user_cellview_client_HasKeyboardPagingPolicy_KeyboardPagingPolicy" >
</xs:attribute>
<xs:attribute name="keyboardSelectionPolicy" type="com_google_gwt_user_cellview_client_HasKeyboardSelectionPolicy_KeyboardSelectionPolicy" >
</xs:attribute>
<xs:attribute name="selectionModel" type="org_cruxframework_crux_core_rebind_screen_widget_creator_HasDataFactory_SelectionModel" use="required" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;multiSelection - allows multiple items to be selected&lt;/li&gt;&lt;li&gt;noSelection -  does not allow selection, but fires selection change events. Use this model if you want to know when a user selects an item, but do not want the view to update based on the selection&lt;/li&gt;&lt;li&gt;singleSelection - allows only one item to be selected a time&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="estimatedRowCount" type="xs:int" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelectionChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onSelectionChange event. This event is fired when the widget&apos;s selection is changed.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onRangeChange" >
</xs:attribute>
<xs:attribute name="onRowCountChange" >
</xs:attribute>
<xs:attribute name="onCellPreview" >
<xs:annotation>
<xs:documentation>Inform the handler for onCellPreview event. This event is fired just before any Cell event occurs.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="cellTree" type="TcellTree">
</xs:element>
<xs:complexType name="TcellTree">
<xs:attribute name="defaultColumnWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="minimumColumnWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="defaultNodeSize" type="xs:int" >
</xs:attribute>
<xs:attribute name="animation" type="org_cruxframework_crux_gwt_rebind_CellTreeFactory_Animations" >
</xs:attribute>
<xs:attribute name="treeViewModelFactoryMethod" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="getValueMethod" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="keyboardSelectionPolicy" type="com_google_gwt_user_cellview_client_HasKeyboardSelectionPolicy_KeyboardSelectionPolicy" >
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClose" >
<xs:annotation>
<xs:documentation>Inform the handler for onClose event. This event is fired when the widget is closed.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onOpen" >
</xs:attribute>
</xs:complexType>
<xs:element name="layoutPanel" type="TlayoutPanel">
</xs:element>
<xs:complexType name="TlayoutPanel">
<xs:sequence>
<xs:element name="layer" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_LayoutPanelFactory_LayoutPanelProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="animationDuration" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAnimationComplete" >
</xs:attribute>
<xs:attribute name="onAnimationStep" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="dateLabel" type="TdateLabel">
</xs:element>
<xs:complexType name="TdateLabel">
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="datePattern" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="autoHorizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;li&gt;contentStart - Specifies that the widget&apos;s contents should be aligned left for LTR content, right for RTL content, and if the content&apos;s direction is DEFAULT, like localeStart&lt;/li&gt;&lt;li&gt;contentEnd - Specifies that the widget&apos;s contents should be aligned right for LTR content, left for RTL content, and if the content&apos;s direction is DEFAULT, like localeEnd&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="verticalPanel" type="TverticalPanel">
</xs:element>
<xs:complexType name="TverticalPanel">
<xs:choice minOccurs="0" maxOccurs="unbounded" >
<xs:element name="cell" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_VerticalPanelFactory_VerticalProcessor">
</xs:element>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:choice>
<xs:attribute name="borderWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="spacing" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="simpleCheckBox" type="TsimpleCheckBox">
</xs:element>
<xs:complexType name="TsimpleCheckBox">
<xs:attribute name="checked" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="grid" type="Tgrid">
</xs:element>
<xs:complexType name="Tgrid">
<xs:sequence>
<xs:element name="row" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_GridFactory_GridRowProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="borderWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="cellPadding" type="xs:int" >
</xs:attribute>
<xs:attribute name="cellSpacing" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
</xs:complexType>
<xs:element name="anchor" type="Tanchor">
</xs:element>
<xs:complexType name="Tanchor">
<xs:sequence>
<xs:any minOccurs="0" maxOccurs="unbounded" namespace="http://www.w3.org/1999/xhtml"/>
</xs:sequence>
<xs:attribute name="href" type="xs:string" >
</xs:attribute>
<xs:attribute name="target" type="xs:string" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Sets the horizontal alignment.Accepts one value between:&lt;ul&gt;&lt;li&gt;center - widget&apos;s contents should be aligned in the center&lt;/li&gt;&lt;li&gt;justify - widget&apos;s contents should be aligned as justify&lt;/li&gt;&lt;li&gt;left - widget&apos;s contents should be aligned to the left&lt;/li&gt;&lt;li&gt;right - widget&apos;s contents should be aligned to the right&lt;/li&gt;&lt;li&gt;localeStart - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the right. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the left&lt;/li&gt;&lt;li&gt;localeEnd - In a RTL layout, specifies that the widget&apos;s contents should be aligned to the left. In a LTR layout, specifies that the widget&apos;s constants should be aligned to the right&lt;/li&gt;&lt;li&gt;defaultAlign - Synonym of localeStart&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="scrollPanel" type="TscrollPanel">
</xs:element>
<xs:complexType name="TscrollPanel">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="alwaysShowScrollBars" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="verticalScrollPosition" type="org_cruxframework_crux_gwt_rebind_ScrollPanelFactory_VerticalScrollPosition" >
</xs:attribute>
<xs:attribute name="horizontalScrollPosition" type="org_cruxframework_crux_gwt_rebind_ScrollPanelFactory_HorizontalScrollPosition" >
</xs:attribute>
<xs:attribute name="ensureVisible" type="xs:string" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onScroll" >
</xs:attribute>
</xs:complexType>
<xs:element name="dockLayoutPanel" type="TdockLayoutPanel">
</xs:element>
<xs:complexType name="TdockLayoutPanel">
<xs:sequence>
<xs:element name="cell" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_DockLayoutPanelFactory_DockLayoutPanelProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="unit" type="com_google_gwt_dom_client_Style_Unit" >
</xs:attribute>
<xs:attribute name="animationDuration" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAnimationComplete" >
</xs:attribute>
<xs:attribute name="onAnimationStep" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="tabPanel" type="TtabPanel">
</xs:element>
<xs:complexType name="TtabPanel">
<xs:sequence>
<xs:element name="tab" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_TabPanelFactory_TabProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="visibleTab" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="animationEnabled" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Enable or disable animations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBeforeSelection" >
<xs:annotation>
<xs:documentation>Inform the handler for onBeforeSelection event. This event is fired when the user tries to select the widget, before the selection is triggered.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onSelection" >
</xs:attribute>
</xs:complexType>
<xs:element name="nativeVerticalScrollbar" type="TnativeVerticalScrollbar">
</xs:element>
<xs:complexType name="TnativeVerticalScrollbar">
<xs:attribute name="scrollHeight" type="xs:int" >
</xs:attribute>
<xs:attribute name="verticalScrollPosition" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onScroll" >
</xs:attribute>
</xs:complexType>
<xs:element name="toggleButton" type="TtoggleButton">
</xs:element>
<xs:complexType name="TtoggleButton">
<xs:choice minOccurs="0" maxOccurs="6" >
<xs:element name="up" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_UpFaceProcessor">
</xs:element>
<xs:element name="upDisabled" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_UpDisabledFaceProcessor">
</xs:element>
<xs:element name="upHovering" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_UpHoveringFaceProcessor">
</xs:element>
<xs:element name="down" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_DownFaceProcessor">
</xs:element>
<xs:element name="downDisabled" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_DownDisabledFaceProcessor">
</xs:element>
<xs:element name="downHovering" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_DownHoveringFaceProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="down" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:complexType>
<xs:element name="flexTable" type="TflexTable">
</xs:element>
<xs:complexType name="TflexTable">
<xs:sequence>
<xs:element name="row" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_FlexTableFactory_GridRowProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="borderWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="cellPadding" type="xs:int" >
</xs:attribute>
<xs:attribute name="cellSpacing" type="xs:int" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onClick" >
<xs:annotation>
<xs:documentation>Inform the handler for onClick event. This event is fired when the widget is clicked.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
</xs:complexType>
<xs:element name="textArea" type="TtextArea">
</xs:element>
<xs:complexType name="TtextArea">
<xs:simpleContent>
<xs:extension base="xs:string">
<xs:attribute name="characterWidth" type="xs:int" >
</xs:attribute>
<xs:attribute name="visibleLines" type="xs:int" >
</xs:attribute>
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="textAlignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="placeHolder" type="xs:string" >
</xs:attribute>
<xs:attribute name="readOnly" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="alignment" type="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign" >
</xs:attribute>
<xs:attribute name="enabled" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="id" type="xs:string" use="required" >
<xs:annotation>
<xs:documentation>Sets the identifier used to reference this widget on the crux view. </xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s width, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This width does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the object&apos;s height, in CSS units (e.g. &quot;10px&quot;, &quot;1em&quot;). This height does not include decorations such as border, margin, and padding.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
<xs:annotation>
<xs:documentation>Clears all of the element&apos;s style names and sets it to the given style.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Sets whether this object is visible. true to show the object, false to hide it</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tooltip" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML title property associated with this object. The title is the &apos;tool-tip&apos; displayed to users when they hover over the object.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="style" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the HTML style property of the widget&apos;s element</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="viewPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can see this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="tabIndex" type="xs:int" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s position in the tab index. If more than one widget has the same tab index, each such widget will receive focus in an arbitrary order. Setting the tab index to &lt;code&gt;-1&lt;/code&gt; will cause this widget to be removed from the tab order.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="accessKey" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets the widget&apos;s &apos;access key&apos;. This key is used (in conjunction with a browser-specific modifier key) to automatically focus the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="focus" type="xs:boolean" >
<xs:annotation>
<xs:documentation>Explicitly focus/unfocus this widget. Only one widget can have focus at a time, and the widget that does will receive all keyboard events.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="editPermission" type="xs:string" >
<xs:annotation>
<xs:documentation>A role that must be checked to verify if user can edit this widget on the Screen. You must define a RoleManager to handle these permission validations.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="name" type="xs:string" >
</xs:attribute>
<xs:attribute name="text" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets this object&apos;s text.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindPath" type="xs:string" >
<xs:annotation>
<xs:documentation>Sets a property path (eg. property1.proerty2) on the View&apos;s associated dataObject. Crux will handle data binding between this dataObject property and this widget. To transfer data between objects and views, cast your view to BindableView and call getData and setData methods.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="bindConverter" type="xs:string" >
<xs:annotation>
<xs:documentation>Specify a type converter to handle type differences betwwen the dataObject property type and the type expected by the bound widget. You can use one of the standard converters on TypeConverters utility class or create your own, extending TypeConverter interface.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="directionEstimator" type="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator" default="defaultAlign" >
<xs:annotation>
<xs:documentation>Set the SelectionModel used by this widget. Accepts one value between:&lt;ul&gt;&lt;li&gt;anyRtl - Estimates the direction of a given string using the &quot;any RTL&quot; heuristic: the return value is RTL if the string contains at least one RTL character. Otherwise, it is LTR.&lt;/li&gt;&lt;li&gt;firstStrong -  Estimates the direction of a given string using the &quot;first strong&quot; heuristic: The return value is determined by the first character in the string with strong directionality. If there is no such character, the return value is DEFAULT.&lt;/li&gt;&lt;li&gt;wordCount - Estimates the direction of a given string using the &quot;word count&quot; heuristic: If the number of RTL words is above a certain percentage of the total number of strongly directional words, returns RTL. Otherwise, if any words are strongly or weakly LTR, returns LTR. Otherwise, returns DEFAULT, which is used to mean &quot;neutral&quot;. Numbers are counted as weakly LTR.&lt;/li&gt;&lt;li&gt;defaultAlign - use the default estimator&lt;/li&gt;&lt;/ul&gt;</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_i18n_client_HasDirection_Direction" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onDoubleClick" >
</xs:attribute>
<xs:attribute name="onLoadWidget" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired when the widget is loaded into its parent view.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onAttach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is attached to the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onDettach" >
<xs:annotation>
<xs:documentation>Inform the handler for onLoadWidget event. This event is fired every time the widget is removed from the DOM in the browser.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseDow event. This event is fired when the user pressed a mouse key over the widget, before he releases the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseUp event. This event is fired when the user released a mouse key over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOver" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOver event. This event is fired when the user puts a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseOut" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseOut event. This event is fired when the user puts a mouse out from the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseMove event. This event is fired when the user moves a mouse over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onMouseWheel" >
<xs:annotation>
<xs:documentation>Inform the handler for onMouseWheel event. This event is fired when the user moves a mouse wheel over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyUp" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyUp event. This event is fired when the user release a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyPress" >
<xs:annotation>
<xs:documentation>Inform the handler for onPress event. This event is fired when the user press a keyboard key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onKeyDown" >
<xs:annotation>
<xs:documentation>Inform the handler for onKeyDow event. This event is fired when the user pressed a keyboard key, before he release the key.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onFocus" >
<xs:annotation>
<xs:documentation>Inform the handler for onFocus event. This event is fired when the widget receives focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onBlur" >
<xs:annotation>
<xs:documentation>Inform the handler for onBlur event. This event is fired when the widget loses focus.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchStart" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchStarch event. This event is fired when the user start touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchMove" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchMove event. This event is fired when the user moves his fingers touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchEnd" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchEnd event. This event is fired when the user release his fingers after touching over the widget.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onTouchCancel" >
<xs:annotation>
<xs:documentation>Inform the handler for onTouchCancel event. This event is fired if any external event with more priority than our website (e.g., an alert window, an incoming call, or a push notification) cancels the operation.</xs:documentation>
</xs:annotation>
</xs:attribute>
<xs:attribute name="onChange" >
<xs:annotation>
<xs:documentation>Inform the handler for onChange event. This event is fired when the widget&apos;s value changes.</xs:documentation>
</xs:annotation>
</xs:attribute>
</xs:extension>
</xs:simpleContent>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_FlexTableFactory_GridRowProcessor">
<xs:sequence>
<xs:element name="cell" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_FlexTableFactory_GridCellProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="styleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_FlexTableFactory_GridCellProcessor">
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="text" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="html" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="widget" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_FlexTableFactory_FlexCellWidgetProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="colSpan" type="xs:int" >
</xs:attribute>
<xs:attribute name="rowSpan" type="xs:int" >
</xs:attribute>
<xs:attribute name="styleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_FlexTableFactory_FlexCellWidgetProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_DownHoveringFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_ImageFaceProcessor">
<xs:attribute name="url" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="visibleRect" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_TextFaceProcessor">
<xs:attribute name="value" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_DownDisabledFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_DownFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_UpHoveringFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_UpDisabledFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_UpFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_ToggleButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TabPanelFactory_TabProcessor">
<xs:sequence>
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="tabText" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="tabHtml" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="tabWidget" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_TabPanelFactory_WidgetTitleTabProcessor">
</xs:element>
</xs:choice>
<xs:element name="panelContent" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_TabPanelFactory_TabWidgetProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="tabEnabled" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="tabWordWrap" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onKeyUp" >
</xs:attribute>
<xs:attribute name="onKeyDown" >
</xs:attribute>
<xs:attribute name="onKeyPress" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TabPanelFactory_TabWidgetProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TabPanelFactory_WidgetTitleTabProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DockLayoutPanelFactory_DockLayoutPanelProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="direction" type="com_google_gwt_user_client_ui_DockLayoutPanel_Direction" default="CENTER" >
</xs:attribute>
<xs:attribute name="size" type="xs:double" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_GridFactory_GridRowProcessor">
<xs:sequence>
<xs:element name="cell" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_GridFactory_GridCellProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="styleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_GridFactory_GridCellProcessor">
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="text" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="html" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="widget" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_GridFactory_GridCellWidgetProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="styleName" type="xs:string" >
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
</xs:attribute>
<xs:attribute name="visible" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_GridFactory_GridCellWidgetProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_VerticalPanelFactory_VerticalProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="height" type="xs:string" >
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_LayoutPanelFactory_LayoutPanelProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="left" type="xs:double" >
</xs:attribute>
<xs:attribute name="right" type="xs:double" >
</xs:attribute>
<xs:attribute name="top" type="xs:double" >
</xs:attribute>
<xs:attribute name="bottom" type="xs:double" >
</xs:attribute>
<xs:attribute name="width" type="xs:double" >
</xs:attribute>
<xs:attribute name="height" type="xs:double" >
</xs:attribute>
<xs:attribute name="animationStartLeft" type="xs:double" >
</xs:attribute>
<xs:attribute name="animationStartRight" type="xs:double" >
</xs:attribute>
<xs:attribute name="animationStartTop" type="xs:double" >
</xs:attribute>
<xs:attribute name="animationStartBottom" type="xs:double" >
</xs:attribute>
<xs:attribute name="animationStartWidth" type="xs:double" >
</xs:attribute>
<xs:attribute name="animationStartHeight" type="xs:double" >
</xs:attribute>
<xs:attribute name="horizontalPosition" type="com_google_gwt_layout_client_Layout_Alignment" >
</xs:attribute>
<xs:attribute name="verticalPosition" type="com_google_gwt_layout_client_Layout_Alignment" >
</xs:attribute>
<xs:attribute name="leftUnit" type="com_google_gwt_dom_client_Style_Unit" default="PX" >
</xs:attribute>
<xs:attribute name="rightUnit" type="com_google_gwt_dom_client_Style_Unit" default="PX" >
</xs:attribute>
<xs:attribute name="topUnit" type="com_google_gwt_dom_client_Style_Unit" default="PX" >
</xs:attribute>
<xs:attribute name="bottomUnit" type="com_google_gwt_dom_client_Style_Unit" default="PX" >
</xs:attribute>
<xs:attribute name="widthUnit" type="com_google_gwt_dom_client_Style_Unit" default="PX" >
</xs:attribute>
<xs:attribute name="heightUnit" type="com_google_gwt_dom_client_Style_Unit" default="PX" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_SafeHtmlCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_NumberCellProcessor">
<xs:attribute name="numberPattern" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageResourceCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageLoadingCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_DateCellProcessor">
<xs:attribute name="datePattern" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ActionCellProcessor">
<xs:attribute name="text" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="delegateMethod" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_EditTextCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_DatePickerCellProcessor">
<xs:attribute name="datePattern" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_CheckboxCellProcessor">
<xs:attribute name="dependsOnSelection" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="handlesSelection" type="xs:boolean" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_TextInputCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_SelectionCellProcessor">
<xs:sequence>
<xs:element name="option" minOccurs="0" maxOccurs="unbounded" type="xs:string">
</xs:element>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ClickableTextCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_TextCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ButtonCellProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_CustomCellProcessor">
<xs:attribute name="cellName" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_VerticalSplitPanelFactory_BottomProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_VerticalSplitPanelFactory_TopProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DecoratedTabPanelFactory_TabProcessor">
<xs:sequence>
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="tabText" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="tabHtml" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="tabWidget" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_DecoratedTabPanelFactory_WidgetTitleTabProcessor">
</xs:element>
</xs:choice>
<xs:element name="panelContent" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_DecoratedTabPanelFactory_TabWidgetProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="tabEnabled" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="tabWordWrap" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onKeyUp" >
</xs:attribute>
<xs:attribute name="onKeyDown" >
</xs:attribute>
<xs:attribute name="onKeyPress" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DecoratedTabPanelFactory_TabWidgetProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DecoratedTabPanelFactory_WidgetTitleTabProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DecoratedStackPanelFactory_StackItemProcessor">
<xs:sequence>
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="textTitle" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="htmlTitle" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
</xs:choice>
<xs:element name="widget" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_DecoratedStackPanelFactory_ContentProcessor">
</xs:element>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DecoratedStackPanelFactory_ContentProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_StackPanelFactory_StackItemProcessor">
<xs:sequence>
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="textTitle" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="htmlTitle" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
</xs:choice>
<xs:element name="widget" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_StackPanelFactory_ContentProcessor">
</xs:element>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_StackPanelFactory_ContentProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_HorizontalSplitPanelFactory_RightProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_HorizontalSplitPanelFactory_LeftProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_HeaderPanelFactory_FooterProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_HeaderPanelFactory_ContentProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_HeaderPanelFactory_HeaderProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_CaptionPanelFactory_ContentProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="0" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TabBarFactory_TabProcessor">
<xs:choice >
<xs:element name="text" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="html" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="widget" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_TabBarFactory_WidgetTabProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="enabled" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onKeyUp" >
</xs:attribute>
<xs:attribute name="onKeyDown" >
</xs:attribute>
<xs:attribute name="onKeyPress" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TabBarFactory_WidgetTabProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_SplitLayoutPanelFactory_SplitLayoutPanelProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="minSize" type="xs:int" >
</xs:attribute>
<xs:attribute name="direction" type="com_google_gwt_user_client_ui_DockLayoutPanel_Direction" default="CENTER" >
</xs:attribute>
<xs:attribute name="size" type="xs:double" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TabLayoutPanelFactory_TabProcessor">
<xs:sequence>
<xs:choice minOccurs="0" maxOccurs="1" >
<xs:element name="tabText" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="tabHtml" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="tabWidget" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_TabLayoutPanelFactory_WidgetTitleTabProcessor">
</xs:element>
</xs:choice>
<xs:element name="panelContent" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_TabLayoutPanelFactory_TabWidgetProcessor">
</xs:element>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TabLayoutPanelFactory_TabWidgetProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TabLayoutPanelFactory_WidgetTitleTabProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DisclosurePanelFactory_ContentProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DisclosurePanelFactory_HeaderProcessor">
<xs:sequence>
<xs:group ref="c:widgets"  minOccurs="1" maxOccurs="1">
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_PushButtonFactory_DownHoveringFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_PushButtonFactory_ImageFaceProcessor">
<xs:attribute name="url" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="visibleRect" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_PushButtonFactory_TextFaceProcessor">
<xs:attribute name="value" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_PushButtonFactory_DownDisabledFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_PushButtonFactory_DownFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_PushButtonFactory_UpHoveringFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_PushButtonFactory_UpDisabledFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_PushButtonFactory_UpFaceProcessor">
<xs:choice >
<xs:element name="textFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_TextFaceProcessor">
</xs:element>
<xs:element name="htmlFace" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="imageFace" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_PushButtonFactory_ImageFaceProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TreeFactory_TreeItemProcessor">
<xs:sequence>
<xs:choice >
<xs:element name="textTitle" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="widgetTitle" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_TreeFactory_WidgetCaptionProcessor">
</xs:element>
</xs:choice>
<xs:element name="item" minOccurs="0" maxOccurs="unbounded" type="org_cruxframework_crux_gwt_rebind_TreeFactory_TreeItemProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="state" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="selected" type="xs:boolean" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_TreeFactory_WidgetCaptionProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_HorizontalPanelFactory_HorizontalProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="height" type="xs:string" >
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DecoratedTabBarFactory_TabProcessor">
<xs:choice >
<xs:element name="text" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="html" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="widget" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_DecoratedTabBarFactory_WidgetTabProcessor">
</xs:element>
</xs:choice>
<xs:attribute name="enabled" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="wordWrap" type="xs:boolean" default="true" >
</xs:attribute>
<xs:attribute name="onClick" >
</xs:attribute>
<xs:attribute name="onKeyUp" >
</xs:attribute>
<xs:attribute name="onKeyDown" >
</xs:attribute>
<xs:attribute name="onKeyPress" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DecoratedTabBarFactory_WidgetTabProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_ListBoxFactory_ListBoxItemsProcessor">
<xs:attribute name="value" type="xs:string" >
</xs:attribute>
<xs:attribute name="label" type="xs:string" >
</xs:attribute>
<xs:attribute name="selected" type="xs:boolean" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_MenuBarFactory_MenutItemSeparatorProcessor">
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_MenuBarFactory_MenutItemProcessor">
<xs:sequence>
<xs:element name="caption" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_MenuBarFactory_CaptionProcessor">
</xs:element>
<xs:choice minOccurs="1" maxOccurs="1" >
<xs:choice >
<xs:element name="command" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_MenuBarFactory_CommandProcessor">
</xs:element>
<xs:element name="subMenu" minOccurs="1" maxOccurs="1" type="TmenuBar">
</xs:element>
</xs:choice>
</xs:choice>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_MenuBarFactory_CommandProcessor">
<xs:attribute name="onExecute" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_MenuBarFactory_CaptionProcessor">
<xs:choice >
<xs:element name="textCaption" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_MenuBarFactory_TextCaptionProcessor">
</xs:element>
<xs:element name="htmlCaption" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_MenuBarFactory_TextCaptionProcessor">
<xs:attribute name="text" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_StackLayoutPanelFactory_StackItemProcessor">
<xs:sequence>
<xs:element name="header" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_StackLayoutPanelFactory_StackHeaderProcessor">
</xs:element>
<xs:element name="content" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_StackLayoutPanelFactory_StackContentProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="selected" type="xs:boolean" default="false" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_StackLayoutPanelFactory_StackContentProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_StackLayoutPanelFactory_StackHeaderProcessor">
<xs:choice >
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
<xs:element name="text" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="html" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
</xs:choice>
<xs:attribute name="size" type="xs:double" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_CellTableFactory_ColumnsProcessor">
<xs:sequence>
<xs:element name="header" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_CellTableFactory_ColumnHeaderProcessor">
</xs:element>
<xs:element name="cell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_CellTableFactory_ColumnCellProcessor">
</xs:element>
<xs:element name="footer" minOccurs="0" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_CellTableFactory_ColumnFooterProcessor">
</xs:element>
</xs:sequence>
<xs:attribute name="sortable" type="xs:boolean" >
</xs:attribute>
<xs:attribute name="property" type="xs:string" use="required" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
<xs:attribute name="fieldUpdaterFactoryMethod" type="xs:string" >
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_CellTableFactory_ColumnFooterProcessor">
<xs:choice >
<xs:element name="text" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="html" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="custom" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_CellTableFactory_CustomColumnFooterProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_CellTableFactory_CustomColumnFooterProcessor">
<xs:attribute name="factoryMethod" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_CellTableFactory_ColumnCellProcessor">
<xs:choice minOccurs="1" maxOccurs="1" >
<xs:element name="customCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_CustomCellProcessor">
</xs:element>
<xs:element name="buttonCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ButtonCellProcessor">
</xs:element>
<xs:element name="textCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_TextCellProcessor">
</xs:element>
<xs:element name="clickableTextCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ClickableTextCellProcessor">
</xs:element>
<xs:element name="selectionCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_SelectionCellProcessor">
</xs:element>
<xs:element name="textInputCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_TextInputCellProcessor">
</xs:element>
<xs:element name="checkboxCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_CheckboxCellProcessor">
</xs:element>
<xs:element name="datePickerCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_DatePickerCellProcessor">
</xs:element>
<xs:element name="editTextCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_EditTextCellProcessor">
</xs:element>
<xs:element name="actionCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ActionCellProcessor">
</xs:element>
<xs:element name="dateCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_DateCellProcessor">
</xs:element>
<xs:element name="imageCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageCellProcessor">
</xs:element>
<xs:element name="imageLoadingCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageLoadingCellProcessor">
</xs:element>
<xs:element name="imageResourceCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_ImageResourceCellProcessor">
</xs:element>
<xs:element name="numberCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_NumberCellProcessor">
</xs:element>
<xs:element name="safeHtmlCell" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_AbstractCellFactory_SafeHtmlCellProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_CellTableFactory_ColumnHeaderProcessor">
<xs:choice >
<xs:element name="text" minOccurs="1" maxOccurs="1" type="xs:string">
</xs:element>
<xs:element name="html" minOccurs="1" maxOccurs="1" type="xs:anyType">
</xs:element>
<xs:element name="custom" minOccurs="1" maxOccurs="1" type="org_cruxframework_crux_gwt_rebind_CellTableFactory_CustomColumnHeaderProcessor">
</xs:element>
</xs:choice>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_CellTableFactory_CustomColumnHeaderProcessor">
<xs:attribute name="factoryMethod" type="xs:string" use="required" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_AbsolutePanelFactory_AbsoluteChildrenProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="left" type="xs:string" >
</xs:attribute>
<xs:attribute name="top" type="xs:string" >
</xs:attribute>
</xs:complexType>
<xs:complexType name="org_cruxframework_crux_gwt_rebind_DockPanelFactory_DockCellProcessor">
<xs:sequence>
<xs:group ref="c:widgets" >
<xs:annotation>
<xs:documentation>Accepts any valid widget</xs:documentation>
</xs:annotation>
</xs:group>
</xs:sequence>
<xs:attribute name="direction" type="org_cruxframework_crux_gwt_rebind_DockPanelContext_DockDirection" default="center" >
</xs:attribute>
<xs:attribute name="height" type="xs:string" >
</xs:attribute>
<xs:attribute name="width" type="xs:string" >
</xs:attribute>
<xs:attribute name="horizontalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment" default="defaultAlign" >
</xs:attribute>
<xs:attribute name="verticalAlignment" type="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment" >
</xs:attribute>
</xs:complexType>
<xs:simpleType name="com_google_gwt_i18n_client_HasDirection_Direction">
<xs:restriction base="xs:string">
<xs:enumeration value="RTL" />
<xs:enumeration value="LTR" />
<xs:enumeration value="DEFAULT" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_gwt_rebind_ScrollPanelFactory_HorizontalScrollPosition">
<xs:restriction base="xs:string">
<xs:enumeration value="left" />
<xs:enumeration value="right" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="com_google_gwt_user_cellview_client_SimplePager_TextLocation">
<xs:restriction base="xs:string">
<xs:enumeration value="CENTER" />
<xs:enumeration value="LEFT" />
<xs:enumeration value="RIGHT" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_align_AutoHorizontalAlignment">
<xs:restriction base="xs:string">
<xs:enumeration value="center" />
<xs:enumeration value="justify" />
<xs:enumeration value="left" />
<xs:enumeration value="right" />
<xs:enumeration value="localeStart" />
<xs:enumeration value="localeEnd" />
<xs:enumeration value="defaultAlign" />
<xs:enumeration value="contentStart" />
<xs:enumeration value="contentEnd" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="com_google_gwt_cell_client_ButtonCellBase_Decoration">
<xs:restriction base="xs:string">
<xs:enumeration value="DEFAULT" />
<xs:enumeration value="PRIMARY" />
<xs:enumeration value="NEGATIVE" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_gwt_rebind_VideoFactory_PreLoadType">
<xs:restriction base="xs:string">
<xs:enumeration value="auto" />
<xs:enumeration value="metadata" />
<xs:enumeration value="none" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_align_HorizontalAlignment">
<xs:restriction base="xs:string">
<xs:enumeration value="center" />
<xs:enumeration value="justify" />
<xs:enumeration value="left" />
<xs:enumeration value="right" />
<xs:enumeration value="localeStart" />
<xs:enumeration value="localeEnd" />
<xs:enumeration value="defaultAlign" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="com_google_gwt_user_cellview_client_HasKeyboardPagingPolicy_KeyboardPagingPolicy">
<xs:restriction base="xs:string">
<xs:enumeration value="CURRENT_PAGE" />
<xs:enumeration value="CHANGE_PAGE" />
<xs:enumeration value="INCREASE_RANGE" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="com_google_gwt_dom_client_Style_Unit">
<xs:restriction base="xs:string">
<xs:enumeration value="PX" />
<xs:enumeration value="PCT" />
<xs:enumeration value="EM" />
<xs:enumeration value="EX" />
<xs:enumeration value="PT" />
<xs:enumeration value="PC" />
<xs:enumeration value="IN" />
<xs:enumeration value="CM" />
<xs:enumeration value="MM" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_direction_DirectionEstimator">
<xs:restriction base="xs:string">
<xs:enumeration value="anyRtl" />
<xs:enumeration value="firstStrong" />
<xs:enumeration value="wordCount" />
<xs:enumeration value="defaultAlign" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="com_google_gwt_user_cellview_client_HasKeyboardSelectionPolicy_KeyboardSelectionPolicy">
<xs:restriction base="xs:string">
<xs:enumeration value="DISABLED" />
<xs:enumeration value="ENABLED" />
<xs:enumeration value="BOUND_TO_SELECTION" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_gwt_rebind_ScrollPanelFactory_VerticalScrollPosition">
<xs:restriction base="xs:string">
<xs:enumeration value="top" />
<xs:enumeration value="bottom" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="com_google_gwt_user_client_ui_DockLayoutPanel_Direction">
<xs:restriction base="xs:string">
<xs:enumeration value="NORTH" />
<xs:enumeration value="EAST" />
<xs:enumeration value="SOUTH" />
<xs:enumeration value="WEST" />
<xs:enumeration value="CENTER" />
<xs:enumeration value="LINE_START" />
<xs:enumeration value="LINE_END" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_gwt_rebind_DockPanelContext_DockDirection">
<xs:restriction base="xs:string">
<xs:enumeration value="center" />
<xs:enumeration value="lineStart" />
<xs:enumeration value="lineEnd" />
<xs:enumeration value="east" />
<xs:enumeration value="north" />
<xs:enumeration value="south" />
<xs:enumeration value="west" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_HasDataFactory_SelectionModel">
<xs:restriction base="xs:string">
<xs:enumeration value="multiSelection" />
<xs:enumeration value="noSelection" />
<xs:enumeration value="singleSelection" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="com_google_gwt_layout_client_Layout_Alignment">
<xs:restriction base="xs:string">
<xs:enumeration value="BEGIN" />
<xs:enumeration value="END" />
<xs:enumeration value="STRETCH" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_gwt_rebind_AudioFactory_PreLoadType">
<xs:restriction base="xs:string">
<xs:enumeration value="auto" />
<xs:enumeration value="metadata" />
<xs:enumeration value="none" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_gwt_rebind_CellTreeFactory_Animations">
<xs:restriction base="xs:string">
<xs:enumeration value="slide" />
<xs:enumeration value="reveal" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_gwt_rebind_ValueBoxBaseFactory_TextAlign">
<xs:restriction base="xs:string">
<xs:enumeration value="center" />
<xs:enumeration value="justify" />
<xs:enumeration value="left" />
<xs:enumeration value="right" />
</xs:restriction>
</xs:simpleType>
<xs:simpleType name="org_cruxframework_crux_core_rebind_screen_widget_creator_align_VerticalAlignment">
<xs:restriction base="xs:string">
<xs:enumeration value="bottom" />
<xs:enumeration value="middle" />
<xs:enumeration value="top" />
</xs:restriction>
</xs:simpleType>
</xs:schema>
